# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16yEfj9QIC4CiSXNnFS36_JMptHssIALc
"""

# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16yEfj9QIC4CiSXNnFS36_JMptHssIALc
"""

import time
import pandas as pd
CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }
days =['saturday' , 'sunday' , 'monday' , 'tuesday' , 'wednesday' ,'thursday' , 'friday']
months = ['january' , 'february' ,'march' , 'april' ,'may' ,'june']
def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = (input('Which City do you want get data about: , (chicago, new york city, washington)')).lower()

    while city != 'chicago' and city!= 'new york city' and city!= 'washington' :
      city = (input('Which City do you want get data about: , (chicago, new york city, washington)')).lower()
    ask_user = input('What basis fo you want to filter on? (month , day ,both , none) none means no filter')
    # get user input for month (all, january, february, ... , june)
    if ask_user.lower() == 'month':
      day = None
      month = input ('For which month you need data:  , (all, january, february, ... , june) ').lower()
      while month!= 'january' and month!= 'february' and month!= 'march'and month!= 'april'and month!= 'may'and month!= 'june':
          print('please enter a valid month name')
          month = input ('For which month you need data:  , (all, january, february, ... , june) ').lower()
    # get user input for day of week (all, monday, tuesday, ... sunday)
    elif ask_user.lower() == 'day' :
      month = None
      day = (input ('For which day of week you need data (all,saturday, sunday , monday ....friday): ')).lower()
      while day not in days :
        print('please enter a valid day name')
        day = (input ('For which day of week you need data (all,saturday, sunday , monday ....friday): ')).lower()
    elif ask_user.lower() == 'both':
      month = (input ('For which month you need data:  , (all, january, february, ... , june) ')).lower()
      while month not in months:
          print('please enter a valid month name')
          month = input ('For which month you need data:  , (all, january, february, ... , june) ').lower()
      day = (input ('For which day of week you need data (all,saturday, sunday , monday ....friday): ')).lower()
      while day not in days: 
           print('please enter a valid day name')
           day = (input ('For which day of week you need data (all,saturday, sunday , monday ....friday): ')).lower()
    elif ask_user.lower() == 'none':
      day = None
      month = None
    else:
      close = input('\nWould you like to close the program? Enter yes or no.\n')
      if close .lower() == 'yes':
        quit()
      else:
        main() 
    return city, month, day
    print('-'*40)
def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    end_rows_desplayed=5
    start_rows_desplayed=0
    print('Please wait while the program is analysing the data for you')
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    if month != 'all' and month != None :
      df['month'] = df['Start Time'].dt.month
      months = ['january', 'february', 'march', 'april', 'may', 'june']
      month = months.index(month)+1
      df= df[df['month'] == month]
    if day!= 'all' and day != None:
      df['day_of_week'] = df['Start Time'].dt.day_name()
      df = df[df['day_of_week'] == day.title()]
    ask2_user = input('Do you want to explore the first 5 rows of data:  (yes / no)')
    while True :
      if ask2_user.lower() != 'yes':
          break
      print(df[start_rows_desplayed:end_rows_desplayed])
      ask2_user = input('Do you want to explore another 5 rows of data:  (yes / no)') 
      start_rows_desplayed+=5
      end_rows_desplayed +=5
    return df
def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    # display the most common month
    if 'month' in df.columns:
        print('The most common month in this city is: ' , df['month'].value_counts().idxmax())

    # display the most common day of week
    if 'day_of_week' in df.columns :
       print('The most common day of week is ', df['day_of_week'].value_counts().idxmax())
    # display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    print('The most common start hour in this city is ' , df['hour'].value_counts().idxmax())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    print('The most common start station in this city is: ' + df['Start Station'].value_counts().idxmax() +' station.')

    # display most commonly used end station

    print('The most common end station in this city is: ' + df['End Station'].value_counts().idxmax() +' station.')

    # display most frequent combination of start station and end station trip
    d1={'combination' : df['Start Station']}
    d2 = {'combination' : df['End Station']}
    df1 = pd.DataFrame(data=d1)
    df2 = pd.DataFrame(data=d2)
    df3 = df1 +',' + df2
    print('the most common combination of start and end stations is: ' + str(df3.value_counts().idxmax()) + ' trip.')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    print('The total time travelled is: ' + str((df['Trip Duration']).sum())+' seconds' )

    # display mean travel time
    print('The average of time travelled is: ' + str((df['Trip Duration']).mean()) + ' seconds')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    print(df['User Type'].value_counts())

    # Display counts of gender
    if 'Gender' in df.columns:
      print(df['Gender'].value_counts())

    # Display earliest, most recent, and most common year of birth
    if 'Birth Year' in df.columns:
      print('The earliest year of birth: ' , df['Birth Year'].min())
      print('The most recent year of birth: ' , df['Birth Year'].max())
      print('The most common year of birth: ' , df['Birth Year'].value_counts().idxmax())
      print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break
if __name__ == "__main__":
	main()